name: Build APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          unzip \
          python3 \
          python3-dev \
          python3-pip \
          openjdk-17-jdk \
          autoconf \
          libtool \
          pkg-config \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          cmake \
          libffi-dev \
          libssl-dev \
          ffmpeg \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev \
          libsdl2-ttf-dev \
          libportmidi-dev \
          libswscale-dev \
          libavformat-dev \
          libavcodec-dev \
          libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev

    - name: Set up Android SDK manually
      run: |
        # Create android sdk directory
        mkdir -p $HOME/android-sdk
        cd $HOME/android-sdk
        
        # Download command line tools
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip
        
        # Setup proper directory structure
        mkdir -p cmdline-tools/latest
        mv cmdline-tools/* cmdline-tools/latest/ 2>/dev/null || true
        
        # Set environment variables
        echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
        echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH

    - name: Install Android SDK components
      run: |
        # Accept all licenses first
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
        
        # Install required components with explicit version
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "platform-tools"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "build-tools;33.0.2"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "platforms;android-33"
        
        # Add platform-tools to PATH after installation
        echo "$HOME/android-sdk/platform-tools" >> $GITHUB_PATH
        
        # Verify installation and show what was installed
        echo "Installed build-tools versions:"
        ls -la $ANDROID_HOME/build-tools/ || echo "No build-tools found"
        echo "Platform-tools contents:"
        ls -la $ANDROID_HOME/platform-tools/ || echo "No platform-tools found"

    - name: Cache Android NDK
      uses: actions/cache@v4
      id: ndk-cache
      with:
        path: ${{ github.workspace }}/android-ndk-r25c-linux.zip
        key: android-ndk-r25c-linux

    - name: Download and setup Android NDK manually
      run: |
        # Create NDK directory
        mkdir -p $ANDROID_HOME/ndk
        cd $ANDROID_HOME/ndk
        
        # Check if NDK zip is cached
        if [ -f "${{ github.workspace }}/android-ndk-r25c-linux.zip" ]; then
          echo "Using cached NDK zip file"
          cp "${{ github.workspace }}/android-ndk-r25c-linux.zip" .
        else
          # Download NDK with retry mechanism
          echo "Downloading Android NDK r25c..."
          for i in {1..3}; do
            if wget -q --timeout=30 --tries=3 https://dl.google.com/android/repository/android-ndk-r25c-linux.zip; then
              echo "NDK download successful on attempt $i"
              # Cache the downloaded file
              cp android-ndk-r25c-linux.zip "${{ github.workspace }}/"
              break
            else
              echo "NDK download failed on attempt $i, retrying..."
              rm -f android-ndk-r25c-linux.zip
              sleep 10
            fi
          done
        fi
        
        # Extract NDK
        if [ -f "android-ndk-r25c-linux.zip" ]; then
          echo "Extracting NDK..."
          unzip -q android-ndk-r25c-linux.zip
          mv android-ndk-r25c 25c
          rm android-ndk-r25c-linux.zip
          echo "NDK extraction completed"
        else
          echo "NDK download failed after 3 attempts"
          exit 1
        fi
        
        # Verify NDK installation
        echo "NDK contents:"
        ls -la $ANDROID_HOME/ndk/
        echo "NDK 25c contents:"
        ls -la $ANDROID_HOME/ndk/25c/ || echo "NDK 25c not found"

    - name: Cache Buildozer directories
      uses: actions/cache@v4
      with:
        path: |
          ~/.buildozer
          ./.buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install buildozer cython

    - name: Prepare buildozer
      run: |
        # Only initialize if buildozer.spec doesn't exist
        if [ ! -f "buildozer.spec" ]; then
          buildozer init
        else
          echo "buildozer.spec already exists, skipping init"
        fi
        
        # Create buildozer android directory structure
        mkdir -p ~/.buildozer/android/platform
        
        # Create symbolic link from buildozer's expected location to our SDK
        if [ ! -L ~/.buildozer/android/platform/android-sdk ]; then
          ln -sf $ANDROID_HOME ~/.buildozer/android/platform/android-sdk
          echo "Created symbolic link for Android SDK"
        fi
        
        # Create the legacy tools directory structure that buildozer expects
        mkdir -p $ANDROID_HOME/tools/bin
        
        # Create symbolic links for sdkmanager in the legacy location
        ln -sf $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager $ANDROID_HOME/tools/bin/sdkmanager
        ln -sf $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager $ANDROID_HOME/tools/bin/avdmanager
        
        # Create tools directory with all the cmdline-tools binaries
        for tool in $ANDROID_HOME/cmdline-tools/latest/bin/*; do
          if [ -f "$tool" ]; then
            toolname=$(basename "$tool")
            if [ ! -f "$ANDROID_HOME/tools/bin/$toolname" ]; then
              ln -sf "$tool" "$ANDROID_HOME/tools/bin/$toolname"
            fi
          fi
        done
        
        # Set proper permissions after platform-tools is installed
        if [ -d "$ANDROID_HOME/cmdline-tools/latest/bin" ]; then
          chmod +x $ANDROID_HOME/cmdline-tools/latest/bin/*
        fi
        
        if [ -d "$ANDROID_HOME/platform-tools" ]; then
          chmod +x $ANDROID_HOME/platform-tools/*
        else
          echo "Warning: platform-tools directory not found"
        fi
        
        if [ -d "$ANDROID_HOME/tools/bin" ]; then
          chmod +x $ANDROID_HOME/tools/bin/*
        fi
        
        # Verify the setup
        echo "Buildozer SDK path contents:"
        ls -la ~/.buildozer/android/platform/
        echo "Buildozer SDK build-tools:"
        ls -la ~/.buildozer/android/platform/android-sdk/build-tools/ || echo "No build-tools found"
        echo "Legacy tools directory:"
        ls -la $ANDROID_HOME/tools/bin/ || echo "No tools/bin found"
        echo "sdkmanager in legacy location:"
        ls -la $ANDROID_HOME/tools/bin/sdkmanager || echo "sdkmanager not found in legacy location"

    - name: Build APK with Buildozer
      run: |
        export ANDROID_NDK_ROOT=$ANDROID_HOME/ndk/25c
        export ANDROID_SDK_ROOT=$ANDROID_HOME
        export ANDROID_HOME=$ANDROID_HOME
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/33.0.2
        
        # Additional environment variables for buildozer
        export AIDL=$ANDROID_HOME/build-tools/33.0.2/aidl
        export ANDROIDAPI="33"
        export NDKAPI="21"
        
        # Debug: Show environment
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT" 
        echo "ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
        echo "AIDL: $AIDL"
        echo "Available build-tools:"
        ls -la $ANDROID_HOME/build-tools/ || echo "No build-tools found"
        echo "Available platform-tools:"
        ls -la $ANDROID_HOME/platform-tools/ || echo "No platform-tools found"
        echo "Available NDK:"
        ls -la $ANDROID_HOME/ndk/ || echo "No NDK found"
        echo "AIDL executable:"
        ls -la $ANDROID_HOME/build-tools/33.0.2/aidl || echo "AIDL not found"
        echo "Buildozer SDK link:"
        ls -la ~/.buildozer/android/platform/android-sdk || echo "Buildozer SDK link not found"
        
        # Build the APK
        buildozer android debug

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: relay-control-apk
        path: bin/*.apk

    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: bin/*.apk
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
